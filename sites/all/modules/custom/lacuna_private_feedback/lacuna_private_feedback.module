<?php

define('PRIVATE_FEEDBACK_FIELD', 'field_private_feedback');

/**
 * @param $og_membership
 *
 * When a new user is approved in a course, create new private group(s)
 * for instructor->student private annotations
 */
function _lacuna_private_feedback_process_new_member($og_membership) {
  // Only process if new member is a user
  if ($og_membership->entity_type != 'user') {
    return;
  }

  // Only trigger if somebody joins a course
  $group = node_load($og_membership->gid);
  if ($group->type != 'course') {
    return;
  }

  $new_member = user_load($og_membership->etid);

  // Get all group members
  $members = og_get_group_members_properties($group, array(), 'members', 'node');

  $instructors = array(); // instructors are group admins
  $students = array();
  foreach ($members as $uid) {
    $member = user_load($uid);

    // Check if they're an active member (i.e., not pending or blocked)
    if (!og_is_member('node', $group->nid, 'user', $member, array
    (OG_STATE_ACTIVE))) {
      continue;
    }

    // Are they an approved instructor in this course?
    $role = user_role_load_by_name('instructor');
    if (user_has_role($role->rid, $member) ||
        user_access('administer group', $member))
    {
      $instructors[] = $member;
    } else {
      $students[] = $member;
    }
  }

  if (in_array($new_member, $students)) {
    _lacuna_private_feedback_add_new_student($group, $new_member, $instructors);
  } elseif (in_array($new_member, $instructors)) {
    _lacuna_private_feedback_add_new_instructor($group, $new_member, $students);
  }
}

/**
 * @param $og_membership
 *
 * May happen on insert if via group interface
 */
function lacuna_private_feedback_og_membership_insert($og_membership) {
  _lacuna_private_feedback_process_new_member($og_membership);
}

/**
 * @param $og_membership
 *
 * May happen via user management interface, too
 */
function lacuna_private_feedback_og_membership_update($og_membership) {
  _lacuna_private_feedback_process_new_member($og_membership);
}

/**
 * Remove user from private feedback groups when they leave the course
 */
function lacuna_private_feedback_og_membership_delete($og_membership) {
  // TODO: If instructor, remove from feedback group
  // can leave students and groups in place to not lose annotations
}


function _lacuna_private_feedback_create_new_group($member, $course) {
  $values = array(
    'type' => 'peer_group',
    'uid' => $member->uid,
    'status' => 1,
    'comment' => 0,
    'promote' => 0,
  );

  var_dump(debug_backtrace());
  $entity = entity_create('node', $values);
  $wrapper = entity_metadata_wrapper('node', $entity);
  $wrapper->group_access = 1;  // make it a private group
  $wrapper->field_private_feedback = 1; // mark it as a private feedback group
  $wrapper->title->set('Private feedback to ' . $member->name);
  $wrapper->save();

  // Make feedback group a member of the course group
  og_group('node', $course->nid, array('entity_type' => 'node', 'entity' =>
    $entity));
  return $entity;
}

/**
 * @param $student
 * @param $instructors
 *
 * Create a new private feedback group for the student
 * Add all instructors to it
 */
function _lacuna_private_feedback_add_new_student($course, $student,
$instructors) {
  $group = _lacuna_private_feedback_create_new_group($student, $course);
  og_group('node', $group->nid, array('entity' => $student));
  foreach ($instructors as $instructor) {
    og_group('node', $group->nid, array('entity' => $instructor));
  }
}

/**
 * @param $course
 * @param $instructor
 * @param $students
 *
 * Find existing private feedback groups for each student
 * Add instructor to each one
 */
function _lacuna_private_feedback_add_new_instructor($course, $instructor,
  $students) {
  // Find existing private feedback peer groups with each student as member
  // Add this instructor to each group
  foreach ($students as $student) {
    $groups = og_get_entity_groups('user', $student);
    foreach ($groups['node'] as $gid) {
      $group = node_load($gid);

      if ($group->type != 'peer_group') {
        continue;
      }

      $peer_group_wrapper = entity_metadata_wrapper('node', $group);
      if ($peer_group_wrapper->{PRIVATE_FEEDBACK_FIELD}->value() != 1) {
        // Not a private feedback group
        continue;
      }

      if (!og_is_member('node', $course->nid, 'node', $group)) {
        // Found a feedback group, but it's not for this course
        continue;
      }

      // We found a private feedback group for this student in this course
      // Now add the new instructor
      og_group('node', $group->nid, array('entity' => $instructor));
    }
  }
}

/**
 * @param $form
 * @param $form_state
 * @param $form_id
 *
 * Hook to hide some fields nobody should be able to edit
 */
function lacuna_private_feedback_form_peer_group_node_form_alter(&$form,
                                                                 &$form_state,
                                                                 $form_id) {
  $form[PRIVATE_FEEDBACK_FIELD]['#access'] = FALSE;
  $form['group_access']['#access'] = FALSE;
}

/**
 * @param $data
 * @return mixed
 *
 * Filter private feedback groups from the peer groups listed by annotations
 */
function lacuna_private_feedback_annotation_filter_groups_alter(&$data) {
  ddl($data, 'filtering');
  $filtered_data = array();
  foreach ($data as $group) {
    ddl($group);
    if ($group->{PRIVATE_FEEDBACK_FIELD} == FALSE) {
      $filtered_data[] = $group;
    }
  }
  $data = $filtered_data;
}