<?php

/**
 * @param $og_membership
 *
 * When a new user is approved in a course, create new private group(s)
 * for instructor->student private annotations
 * No need to do this on membership_insert() because they're still pending
 * and we don't know the correct permissions yet
 */
function lacuna_private_feedback_og_membership_update($og_membership) {
  global $user;

  $group = node_load($og_membership->gid);
  // Only trigger when somebody joins a course
  if ($group->type != 'course') {
    return;
  }

  // Get all group members
  $members = og_get_group_members_properties($group, array(), 'members', 'node');

  $instructors = array(); // instructors are group admins
  $students = array();
  foreach ($members as $uid) {
    $member = user_load($uid);

    // Check if they're an active member (i.e., not pending or blocked)
    if (!og_is_member('node', $group->nid, 'user', $member, array
    (OG_STATE_ACTIVE))) {
      continue;
    }

    // If so, check if they have admin rights in the group
    if (og_user_access('node', $group->nid, 'administer group', $member)) {
      $instructors[] = $member;
    }
    else {
      $students[] = $member;
    }
  }

  if (in_array($user, $students)) {
    _lacuna_private_feedback_add_new_student($group, $user, $instructors);
  } elseif (in_array($user, $instructors)) {
    _lacuna_private_feedback_add_new_instructor($group, $user, $students);
  }
}

/**
 * Remove user from private feedback groups when they leave the course
 */
function lacuna_private_feedback_og_membership_delete($og_membership) {
  // TODO
}


function _lacuna_private_feedback_create_new_group($course) {
  global $user;
  $values = array(
    'type' => 'peer_group',
    'uid' => $user->uid,
    'status' => 1,
    'comment' => 0,
    'promote' => 0,
    'group_access' => 0, // make it a private group
    'field_private_feedback' => 1 // mark it as a private feedback group
  );

  $entity = entity_create('node', $values);
  $wrapper = entity_metadata_wrapper('node', $entity);
  $wrapper->title->set('Private Feedback Group for ' . $user->name);
  $wrapper->save();

  // Make feedback group a member of the course group
  og_group('node', $wrapper->nid, array('entity_type' => 'node', 'entity' =>
    $course));
  return $wrapper;
}

/**
 * @param $student
 * @param $instructors
 *
 * Create a new private feedback group for the student
 * Add all instructors to it
 */
function _lacuna_private_feedback_add_new_student($course, $student,
$instructors) {
  $group_wrapper = _lacuna_private_feedback_create_new_group($course);
  og_group('user', $group_wrapper->nid, $student);
  foreach ($instructors as $instructor) {
    og_group('user', $group_wrapper->nid, $instructor);
  }
}

/**
 * @param $instructor
 * @param $students
 *
 * Find existing private feedback groups for each student
 * Add instructor to each one
 */
function _lacuna_private_feedback_add_new_instructor($course, $instructor,
  $students) {
  // Find existing private feedback peer groups with each student as member
  // Add this instructor to each group
  foreach ($students as $student) {
    $groups = og_get_entity_groups('user', $student);
    foreach ($groups as $group) {
      if ($group->type != 'peer_group') {
        continue;
      }
      $peer_group_wrapper = entity_metadata_wrapper('node', $group);

    }
  }
}