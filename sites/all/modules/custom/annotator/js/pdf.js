// Generated by CoffeeScript 1.11.1
(function() {
  var $,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  $ = jQuery;

  Annotator.Plugin.PDF = (function(superClass) {
    extend(PDF, superClass);

    function PDF() {
      return PDF.__super__.constructor.apply(this, arguments);
    }

    PDF.prototype.ANNOTATION_LAYER_MARKUP = '<div class="pdf-annotation-layer"></div>';

    PDF.prototype.ANNOTATION_MARKUP = '<div class="pdf-annotation"></div>';

    PDF.prototype.DRAG_THRESHOLD = 5;

    PDF.prototype.pluginInit = function() {
      if (!Annotator.supported()) {
        return;
      }
      return Drupal.PDFDocumentView.loaded.then((function(_this) {
        return function() {
          _this.annotationLayers = _this.createAnnotationLayers();
          _this.listenForInteraction();
          return _this.enableAnnotationCreation();
        };
      })(this));
    };

    PDF.prototype.createAnnotationLayers = function() {
      return Drupal.PDFDocumentView.pdfPages.map((function(_this) {
        return function(page) {
          var $annotationLayer;
          $annotationLayer = $(_this.ANNOTATION_LAYER_MARKUP);
          $(page.div).append($annotationLayer);
          return $annotationLayer[0];
        };
      })(this));
    };

    PDF.prototype.listenForInteraction = function() {
      var dragging, mouseDown, mousedownAnnotationLayer, mousedownCoordinates;
      mouseDown = false;
      dragging = false;
      mousedownAnnotationLayer = null;
      mousedownCoordinates = null;
      return $(this.annotationLayers).on('mousedown mousemove mouseup', (function(_this) {
        return function(event) {
          var annotationLayer, coordinates, eventParameters, pageNumber, rect;
          annotationLayer = mousedownAnnotationLayer || event.currentTarget;
          pageNumber = _this.annotationLayers.indexOf(annotationLayer);
          rect = annotationLayer.getBoundingClientRect();
          coordinates = {
            x: event.clientX - rect.x,
            y: event.clientY - rect.y
          };
          eventParameters = {
            annotationLayer: annotationLayer,
            pageNumber: pageNumber,
            coordinates: coordinates
          };
          if (event.type === 'mousedown') {
            mouseDown = true;
            mousedownAnnotationLayer = annotationLayer;
            mousedownCoordinates = coordinates;
          }
          if (event.type === 'mouseup') {
            mouseDown = false;
            mousedownAnnotationLayer = null;
            mousedownCoordinates = null;
            if (dragging) {
              dragging = false;
              _this.publish('pdf-dragend', eventParameters);
            } else {
              _this.publish('pdf-click', eventParameters);
            }
          }
          if (mouseDown && event.type === 'mousemove') {
            if (!dragging) {
              if (_this.checkDragThreshold(coordinates, mousedownCoordinates)) {
                dragging = true;
                return _this.publish('pdf-dragstart', eventParameters);
              }
            } else {
              return _this.publish('pdf-dragmove', eventParameters);
            }
          }
        };
      })(this));
    };

    PDF.prototype.checkDragThreshold = function(current, down) {
      var x, y;
      x = current.x > down.x + this.DRAG_THRESHOLD || current.x < down.x - this.DRAG_THRESHOLD;
      y = current.y > down.y + this.DRAG_THRESHOLD || current.y < down.y - this.DRAG_THRESHOLD;
      return x || y;
    };

    PDF.prototype.enableAnnotationCreation = function() {
      var $newAnnotationElement, pageNumber, startCoordinates;
      $newAnnotationElement = null;
      pageNumber = null;
      startCoordinates = null;
      this.subscribe('pdf-dragstart', (function(_this) {
        return function(eventParameters) {
          pageNumber = eventParameters.pageNumber;
          startCoordinates = eventParameters.coordinates;
          $newAnnotationElement = $(_this.ANNOTATION_MARKUP).addClass('new-annotation');
          $newAnnotationElement.css('left', eventParameters.coordinates.x);
          $newAnnotationElement.css('top', eventParameters.coordinates.y);
          return $(eventParameters.annotationLayer).append($newAnnotationElement);
        };
      })(this));
      this.subscribe('pdf-dragmove', (function(_this) {
        return function(eventParameters) {
          var height, width;
          width = eventParameters.coordinates.x - startCoordinates.x;
          height = eventParameters.coordinates.y - startCoordinates.y;
          $newAnnotationElement.css('width', width > 0 ? width : 0);
          return $newAnnotationElement.css('height', height > 0 ? height : 0);
        };
      })(this));
      return this.subscribe('pdf-dragend', (function(_this) {
        return function(eventParameters) {
          var annotation, endX, endY, height, ref, ref1, startX, startY, v, width;
          v = Drupal.PDFDocumentView.pdfPages[pageNumber].viewport;
          ref = v.convertToPdfPoint(startCoordinates.x, startCoordinates.y), startX = ref[0], startY = ref[1];
          ref1 = v.convertToPdfPoint(eventParameters.coordinates.x, eventParameters.coordinates.y), endX = ref1[0], endY = ref1[1];
          width = endX - startX;
          height = endY - startY;
          if (width > 0 && height < 0) {
            annotation = _this.annotator.createAnnotation();
            annotation.pdfRange = {
              pageNumber: pageNumber,
              startX: startX,
              startY: startY,
              width: width,
              height: height
            };
            _this.openEditor(annotation, $newAnnotationElement);
          } else {
            $newAnnotationElement.remove();
          }
          $newAnnotationElement = null;
          pageNumber = null;
          return startCoordinates = null;
        };
      })(this));
    };

    PDF.prototype.openEditor = function(annotation, $element) {
      var bottom, editorLocation, left, ref, right, top;
      ref = $element[0].getBoundingClientRect(), top = ref.top, left = ref.left, bottom = ref.bottom, right = ref.right;
      editorLocation = {
        top: (top + bottom) / 2,
        left: (left + right) / 2
      };
      return this.annotator.showEditor(annotation, editorLocation);
    };

    return PDF;

  })(Annotator.Plugin);

}).call(this);
