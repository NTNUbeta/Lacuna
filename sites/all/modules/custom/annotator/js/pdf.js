// Generated by CoffeeScript 1.11.1
(function() {
  var $,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  $ = jQuery;

  Annotator.Plugin.PDF = (function(superClass) {
    extend(PDF, superClass);

    function PDF() {
      this.onPdfHighlightMouseover = bind(this.onPdfHighlightMouseover, this);
      return PDF.__super__.constructor.apply(this, arguments);
    }

    PDF.prototype.ANNOTATION_LAYER_MARKUP = '<div class="pdf-annotation-layer"></div>';

    PDF.prototype.ANNOTATION_MARKUP = '<div class="pdf-annotation annotator-hl"></div>';

    PDF.prototype.DRAG_THRESHOLD = 5;

    PDF.prototype.pluginInit = function() {
      var promise;
      if (!Annotator.supported()) {
        return;
      }
      promise = Drupal.PDFDocumentView.loaded.then((function(_this) {
        return function() {
          _this.$viewerIframe = $('iframe.pdf');
          _this.annotationLayers = _this.createAnnotationLayers();
          _this.listenForInteraction();
          return _this.enableAnnotationCreation();
        };
      })(this));
      return this.subscribe('annotationsLoaded', (function(_this) {
        return function(annotations) {
          return promise.then(function() {
            return annotations.forEach(_this.drawExistingAnnotation.bind(_this));
          });
        };
      })(this));
    };

    PDF.prototype.createAnnotationLayers = function() {
      return Drupal.PDFDocumentView.pdfPages.map((function(_this) {
        return function(page) {
          var $annotationLayer;
          $annotationLayer = $(_this.ANNOTATION_LAYER_MARKUP);
          $(page.div).append($annotationLayer);
          return $annotationLayer[0];
        };
      })(this));
    };

    PDF.prototype.listenForInteraction = function() {
      var dragging, mouseDown, mousedownAnnotationLayer, mousedownCoordinates;
      mouseDown = false;
      dragging = false;
      mousedownAnnotationLayer = null;
      mousedownCoordinates = null;
      return $(this.annotationLayers).on('mousedown mousemove mouseup', (function(_this) {
        return function(event) {
          var annotationLayer, coordinates, eventParameters, pageNumber, rect;
          annotationLayer = mousedownAnnotationLayer || event.currentTarget;
          pageNumber = _this.annotationLayers.indexOf(annotationLayer);
          rect = annotationLayer.getBoundingClientRect();
          coordinates = {
            x: event.clientX - rect.x,
            y: event.clientY - rect.y
          };
          eventParameters = {
            annotationLayer: annotationLayer,
            pageNumber: pageNumber,
            coordinates: coordinates
          };
          if (event.type === 'mousedown') {
            mouseDown = true;
            mousedownAnnotationLayer = annotationLayer;
            mousedownCoordinates = coordinates;
          }
          if (event.type === 'mouseup') {
            mouseDown = false;
            mousedownAnnotationLayer = null;
            mousedownCoordinates = null;
            if (dragging) {
              dragging = false;
              _this.publish('pdf-dragend', eventParameters);
            } else {
              _this.publish('pdf-click', eventParameters);
            }
          }
          if (mouseDown && event.type === 'mousemove') {
            if (!dragging) {
              if (_this.checkDragThreshold(coordinates, mousedownCoordinates)) {
                dragging = true;
                return _this.publish('pdf-dragstart', eventParameters);
              }
            } else {
              return _this.publish('pdf-dragmove', eventParameters);
            }
          }
        };
      })(this));
    };

    PDF.prototype.checkDragThreshold = function(current, down) {
      var x, y;
      x = current.x > down.x + this.DRAG_THRESHOLD || current.x < down.x - this.DRAG_THRESHOLD;
      y = current.y > down.y + this.DRAG_THRESHOLD || current.y < down.y - this.DRAG_THRESHOLD;
      return x || y;
    };

    PDF.prototype.enableAnnotationCreation = function() {
      var $newAnnotationElement, pageNumber, startCoordinates;
      this.creatingPdfAnnotation = false;
      $newAnnotationElement = null;
      pageNumber = null;
      startCoordinates = null;
      this.subscribe('pdf-dragstart', (function(_this) {
        return function(eventParameters) {
          _this.creatingPdfAnnotation = true;
          pageNumber = eventParameters.pageNumber;
          startCoordinates = eventParameters.coordinates;
          $newAnnotationElement = $(_this.ANNOTATION_MARKUP).addClass('new-annotation');
          $newAnnotationElement.css({
            left: eventParameters.coordinates.x
          });
          $newAnnotationElement.css({
            top: eventParameters.coordinates.y
          });
          return $(eventParameters.annotationLayer).append($newAnnotationElement);
        };
      })(this));
      this.subscribe('pdf-dragmove', (function(_this) {
        return function(eventParameters) {
          var height, width;
          width = eventParameters.coordinates.x - startCoordinates.x;
          height = eventParameters.coordinates.y - startCoordinates.y;
          $newAnnotationElement.css({
            width: width > 0 ? width : 0
          });
          return $newAnnotationElement.css({
            height: height > 0 ? height : 0
          });
        };
      })(this));
      return this.subscribe('pdf-dragend', (function(_this) {
        return function(eventParameters) {
          var heightPdf, pdfRange, ref, ref1, v, widthPdf, x1Pdf, x2Pdf, y1Pdf, y2Pdf;
          v = Drupal.PDFDocumentView.pdfPages[pageNumber].viewport;
          ref = v.convertToPdfPoint(startCoordinates.x, startCoordinates.y), x1Pdf = ref[0], y1Pdf = ref[1];
          ref1 = v.convertToPdfPoint(eventParameters.coordinates.x, eventParameters.coordinates.y), x2Pdf = ref1[0], y2Pdf = ref1[1];
          widthPdf = x2Pdf - x1Pdf;
          heightPdf = y2Pdf - y1Pdf;
          if (widthPdf > 0 && heightPdf < 0) {
            pdfRange = {
              pageNumber: pageNumber,
              x1Pdf: x1Pdf,
              y1Pdf: y1Pdf,
              x2Pdf: x2Pdf,
              y2Pdf: y2Pdf
            };
            _this.createAndEditAnnotation(pdfRange, $newAnnotationElement);
          } else {
            $newAnnotationElement.remove();
          }
          _this.creatingPdfAnnotation = false;
          $newAnnotationElement = null;
          pageNumber = null;
          return startCoordinates = null;
        };
      })(this));
    };

    PDF.prototype.createAndEditAnnotation = function(pdfRange, $newAnnotationElement) {
      var annotation, onCancel, onSave;
      annotation = this.annotator.createAnnotation();
      annotation.pdfRange = pdfRange;
      annotation.quote = [];
      annotation.ranges = [];
      annotation.highlights = [];
      onSave = (function(_this) {
        return function() {
          _this.publish('annotationCreated', [annotation]);
          $newAnnotationElement.removeClass('new-annotation');
          $newAnnotationElement.data('annotation', annotation);
          $newAnnotationElement.on('mouseover', _this.onPdfHighlightMouseover);
          return $newAnnotationElement.on('mouseout', _this.annotator.startViewerHideTimer);
        };
      })(this);
      onCancel = (function(_this) {
        return function() {
          return $newAnnotationElement.remove();
        };
      })(this);
      return this.openEditor(annotation, $newAnnotationElement, onSave, onCancel);
    };

    PDF.prototype.openEditor = function(annotation, $annotationElement, onSave, onCancel) {
      var bottom, cancel, cleanup, editorLocation, left, ref, right, save, top;
      $(this.$viewerIframe[0].contentDocument).find('#viewerContainer').css({
        overflow: 'hidden'
      });
      ref = $annotationElement[0].getBoundingClientRect(), top = ref.top, left = ref.left, bottom = ref.bottom, right = ref.right;
      editorLocation = {
        top: (top + bottom) / 2,
        left: (left + right) / 2
      };
      save = (function(_this) {
        return function() {
          cleanup();
          return onSave();
        };
      })(this);
      cancel = (function(_this) {
        return function() {
          cleanup();
          return onCancel();
        };
      })(this);
      cleanup = (function(_this) {
        return function() {
          $(_this.$viewerIframe[0].contentDocument).find('#viewerContainer').css({
            overflow: 'auto'
          });
          _this.unsubscribe('annotationEditorHidden', cancel);
          return _this.unsubscribe('annotationEditorSubmit', save);
        };
      })(this);
      this.subscribe('annotationEditorHidden', cancel);
      this.subscribe('annotationEditorSubmit', save);
      return this.annotator.showEditor(annotation, editorLocation);
    };

    PDF.prototype.drawExistingAnnotation = function(annotation) {
      var $annotationElement, height, pageNumber, ref, ref1, ref2, ref3, ref4, v, width, x1, x1Pdf, x2, x2Pdf, y1, y1Pdf, y2, y2Pdf;
      if (annotation.pdfRange) {
        ref = annotation.pdfRange, pageNumber = ref.pageNumber, x1Pdf = ref.x1Pdf, y1Pdf = ref.y1Pdf, x2Pdf = ref.x2Pdf, y2Pdf = ref.y2Pdf;
        v = Drupal.PDFDocumentView.pdfPages[pageNumber].viewport;
        ref1 = [[x1Pdf, y1Pdf], [x2Pdf, y2Pdf]].map(function(arg) {
          var x, y;
          x = arg[0], y = arg[1];
          return v.convertToViewportPoint(x, y);
        }), (ref2 = ref1[0], x1 = ref2[0], y1 = ref2[1]), (ref3 = ref1[1], x2 = ref3[0], y2 = ref3[1]);
        ref4 = [x2 - x1, y2 - y1], width = ref4[0], height = ref4[1];
        $annotationElement = $(this.ANNOTATION_MARKUP);
        $annotationElement.css({
          left: x1,
          top: y1,
          width: width,
          height: height
        });
        $annotationElement.data('annotation', annotation);
        $annotationElement.on('mouseover', this.onPdfHighlightMouseover);
        $annotationElement.on('mouseout', this.annotator.startViewerHideTimer);
        return $(this.annotationLayers[pageNumber]).append($annotationElement);
      }
    };

    PDF.prototype.onPdfHighlightMouseover = function(event) {
      var annotation, location;
      this.annotator.clearViewerHideTimer();
      if (this.creatingPdfAnnotation) {
        return false;
      }
      if (this.annotator.viewer.isShown()) {
        this.annotator.viewer.hide();
      }
      annotation = $(event.target).data('annotation');
      location = {
        left: event.clientX,
        top: event.clientY
      };
      return this.annotator.showViewer([annotation], location);
    };

    return PDF;

  })(Annotator.Plugin);

}).call(this);
