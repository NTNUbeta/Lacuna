// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Annotator.Plugin.Comment = (function(superClass) {
    extend(Comment, superClass);

    function Comment() {
      this.addComment = bind(this.addComment, this);
      this.saveComment = bind(this.saveComment, this);
      this.showComments = bind(this.showComments, this);
      this.updateViewer = bind(this.updateViewer, this);
      return Comment.__super__.constructor.apply(this, arguments);
    }

    Comment.prototype.commentClass = "annotator-comment fa fa-reply";

    Comment.prototype.pluginInit = function() {
      if (!Annotator.supported()) {
        return;
      }
      return this.annotator.viewer.addField({
        load: this.updateViewer
      });
    };

    Comment.prototype.updateViewer = function(field, annotation) {
      var className, i, len, n_comments, ref, replies;
      n_comments = 0;
      replies = "Replies";
      if (Object.keys(annotation.comments).length > 0) {
        n_comments = Object.keys(annotation.comments).length;
        if (n_comments === 1) {
          replies = "Reply";
        }
      }
      ref = this.commentClass.split(" ");
      for (i = 0, len = ref.length; i < len; i++) {
        className = ref[i];
        field.classList.add(className);
      }
      if (n_comments > 0) {
        field.innerHTML = "<span>" + n_comments + " " + replies + "</span>";
        return field.addEventListener("click", (function(_this) {
          return function(event) {
            return _this.showComments(event, annotation);
          };
        })(this));
      } else {
        field.innerHTML = "<span>Reply</span>";
        return field.addEventListener("click", (function(_this) {
          return function(event) {
            return _this.addComment(event, annotation);
          };
        })(this));
      }
    };

    Comment.prototype.showComments = function(event, annotation) {
      return console.log(annotation.comments);
    };

    Comment.prototype.saveComment = function(event, textarea) {
      return console.log(textarea.value);
    };

    Comment.prototype.addComment = function(event, annotation) {
      var buttons, cancel, form, save, target, textarea;
      target = event.target.parentNode || event.srcElement.parentNode;
      console.log(target);
      target.removeEventListener("click", this.addComment);
      form = document.createElement("form");
      form.id = "annotator-comment-form";
      target.appendChild(form);
      textarea = document.createElement("textarea");
      textarea.classList.add("annotator-comment");
      buttons = document.createElement("div");
      buttons.classList.add("annotator-comment-controls");
      save = document.createElement("a");
      save.classList.add("annotator-comment-save");
      save.innerHTML = "Save";
      cancel = document.createElement("a");
      cancel.classList.add("annotator-comment-cancel");
      cancel.innerHTML = "Cancel";
      buttons.appendChild(cancel);
      buttons.appendChild(save);
      form.appendChild(textarea);
      return form.appendChild(buttons);
    };

    return Comment;

  })(Annotator.Plugin);

}).call(this);
