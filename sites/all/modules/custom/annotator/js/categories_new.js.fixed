(function($) {
  var __hasProp = Object.prototype.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  Annotator.Plugin.Categories = (function(_super) {

    __extends(Categories, _super);

    Categories.prototype.html = {
      element: "<li class=\"annotator-categories\">\n<h4>" + Annotator._t('Categories') + "</h4>\n<br clear=\"all\">\n</li>"
    };

    Categories.prototype.options = {
      categories: [],
      classForSelectedCategory: "selected",
      categoryClass: "annotation-category"
    };

    Categories.prototype.field = null;

    Categories.prototype.input = null;

    Categories.prototype.categoriesHtml = function() {
      var categories, string;
      categories = this.options.categories;
      console.log(categories);
      string = $.map(categories, function(category) {
        return "<div class='annotator-category'>" + category.name + "</div>";
      }).join(' ');
      return string;
    };

    Categories.prototype.pluginInit = function() {
      if (!Annotator.supported()) return;
      this.field = this.annotator.editor.addField({
        label: Annotator._t('Category') + '\u2026',
        load: this.updateField,
        submit: this.setAnnotationCategory
      });
      return this.annotator.viewer.addField({
        load: this.updateViewer
      });
    };

    function Categories(element, categories) {
      Categories.__super__.constructor.call(this, element, categories);
      if (categories) this.options.categories = categories;
    }

    Categories.prototype.annotationField = function() {
      return this.element.find("textarea:first");
    };

    Categories.prototype.selectedCategory = function() {
      return this.element.find('.annotator-category-' + this.options.classForSelectedCategory);
    };

    Categories.prototype.setSelectedCategory = function(currentCategory) {
      this.element.find('.annotator-category').removeClass(this.options.classForSelectedCategory);
      return $(currentCategory).addClass(this.options.classForSelectedCategory);
    };

    Categories.prototype.updateViewer = function(field, annotation) {
      field = $(field);
      if (annotation.category && annotation.category.length) {
        return field.addClass(this.options.categoryClass).html(function() {
          return annotation.category;
        });
      }
    };

    Categories.prototype.updateField = function(field, annotation) {
      return this.input.val(annotation.category);
    };

    Categories.prototype.changeSelectedCategory = function(event) {};

    Categories.prototype.categoriesWrapperDom = function() {
      return this.element.find('.annotator-categories');
    };

    Categories.prototype.setAnnotationCategory = function(field, annotation) {
      return annotation.category = this.input.val();
    };

    Categories.prototype.fixEditorDimension = function() {
      var categoriesWidth, dom;
      dom = this.categoriesWrapperDom();
      categoriesWidth = $.map(dom.find('.annotator-category'), function(category) {
        return parseInt($(category).css('width')) + parseInt($(category).css('padding-left')) + parseInt($(category).css('padding-right')) + parseInt($(category).css('margin-left')) + parseInt($(category).css('margin-right'));
      }).reduce(function(x, y) {
        return x + y;
      });
      categoriesWidth += parseInt(dom.css('padding-left')) + parseInt(dom.css('padding-right')) + 18;
      if (dom.width() < categoriesWidth) return dom.width(categoriesWidth);
    };

    return Categories;

  })(Annotator.Plugin);

})(jQuery);
