// Generated by CoffeeScript 1.9.3
(function() {
  var $,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  $ = jQuery;

  Annotator.Plugin.Privacy = (function(superClass) {
    extend(Privacy, superClass);

    function Privacy() {
      this.addPrivacy = bind(this.addPrivacy, this);
      return Privacy.__super__.constructor.apply(this, arguments);
    }

    Privacy.prototype.options = {
      privacyClass: "annotator-privacy",
      publicClass: "annotator-privacy-public fa fa-unlock",
      privateClass: "annotator-privacy-private fa fa-lock"
    };

    Privacy.prototype.events = {
      'annotationEditorShown': "addPrivacy",
      'annotationEditorSubmit': "savePrivacy"
    };

    Privacy.prototype.field = null;

    Privacy.prototype.input = null;

    Privacy.prototype.pluginInit = function() {
      if (!Annotator.supported()) {
        return;
      }
      this.field = this.annotator.editor.addField({
        label: Annotator._t('Privacy')
      });
      return this.annotator.viewer.addField({
        load: this.updateViewer
      });
    };

    Privacy.prototype.addPrivacy = function(event, annotation) {
      var gid, group, groups, groups_html, i, len, privacy_html, privacy_type, ref;
      groups_html = privacy_html = '';
      ref = ["Private", "Instructor", "Co-Learners"];
      for (i = 0, len = ref.length; i < len; i++) {
        privacy_type = ref[i];
        privacy_html += '<label class="privacy types">';
        privacy_html += '<input type="checkbox" class="privacy-type" id="' + privacy_type + '" value="' + privacy_type + '" />';
        privacy_html += privacy_type;
        privacy_html += '</label>';
      }
      groups = Drupal.settings.annotator_groups;
      for (gid in groups) {
        group = groups[gid];
        groups_html += '<label class="privacy groups">';
        groups_html += '<input type="checkbox" class="privacy-group" value="' + gid + '" />';
        groups_html += group;
        groups_html += '</label>';
      }
      return $(this.field).html(privacy_html + groups_html);
    };

    Privacy.prototype.savePrivacy = function(event, annotation) {
      var selected_groups;
      selected_groups = [];
      $('input.privacy-type[type=checkbox]').each(function() {
        if ($(this).is(":checked")) {
          selected_groups.push($(this).val().toUpperCase());
          if ("Co-Learners" === $(this).attr("id")) {
            return $('input.privacy-group[type=checkbox]').each(function() {
              if ($(this).is(":checked")) {
                return selected_groups.push($(this).val());
              }
            });
          }
        }
      });
      annotation.groups = selected_groups;
      if ((annotation.text != null) && (annotation.text.length > 0) && 0 === annotation.groups.length) {
        window.alert("You did not select a Privacy Setting, so the default 'Instructor' has been chosen.");
        return annotation.groups = ["INSTRUCTOR"];
      }
    };

    Privacy.prototype.updateViewer = function(field, annotation) {
      return field = $(field);
    };

    return Privacy;

  })(Annotator.Plugin);

}).call(this);
