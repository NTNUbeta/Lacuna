// Generated by CoffeeScript 1.9.3
(function() {
  var $,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  $ = jQuery;

  Annotator.Plugin.Privacy = (function(superClass) {
    extend(Privacy, superClass);

    function Privacy() {
      this.addPrivacy = bind(this.addPrivacy, this);
      return Privacy.__super__.constructor.apply(this, arguments);
    }

    Privacy.prototype.events = {
      'annotationEditorShown': "addPrivacy",
      'annotationEditorSubmit': "savePrivacy"
    };

    Privacy.prototype.field = null;

    Privacy.prototype.input = null;

    Privacy.prototype.pluginInit = function() {
      if (!Annotator.supported()) {
        return;
      }
      this.field = this.annotator.editor.addField({
        label: Annotator._t('Privacy')
      });
      return this.annotator.viewer.addField({
        load: this.updateViewer
      });
    };

    Privacy.prototype.addPrivacy = function(event, annotation) {
      var attr, checked, gid, group, group_object, group_type, groups, groups_html, i, j, len, len1, privacy_html, privacy_type, ref, ref1, settings;
      settings = Drupal.settings.privacy_options;
      if (annotation.privacy_options) {
        ref = annotation.privacy_options;
        for (i = 0, len = ref.length; i < len; i++) {
          attr = ref[i];
          console.log(attr);
          settings[attr] = annotation.privacy_options[attr];
        }
      }
      console.log(settings);
      groups_html = privacy_html = '';
      privacy_html += '<span class="privacy types">';
      ref1 = ["Private", "Instructor", "Co-Learners"];
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        privacy_type = ref1[j];
        checked = settings.audience[privacy_type.toLowerCase()] ? 'checked' : '';
        privacy_html += '<span class="privacy-type ' + checked + '" id="' + privacy_type + '">' + privacy_type + '</span>';
      }
      privacy_html += '</span>';
      groups = settings.groups;
      for (group_type in groups) {
        group_object = groups[group_type];
        for (gid in group_object) {
          group = group_object[gid];
          groups_html += '<label class="privacy groups">';
          checked = group.selected ? 'checked="checked"' : '';
          groups_html += '<input type="checkbox" class="privacy-group ' + group_type + '" value="' + gid + '" ' + checked + ' />';
          groups_html += group[0];
          groups_html += '</label>';
        }
      }
      return $(this.field).html(privacy_html + groups_html);
    };

    Privacy.prototype.savePrivacy = function(event, annotation) {
      var selected_groups;
      selected_groups = [];
      $('span.privacy-type').each(function() {
        if ($(this).hasClass("checked")) {
          selected_groups.push($(this).val().toUpperCase());
          if ("Co-Learners" === $(this).attr("id")) {
            return $('input.privacy-group[type=checkbox]').each(function() {
              if ($(this).is(":checked")) {
                return selected_groups.push($(this).val());
              }
            });
          }
        }
      });
      annotation.groups = selected_groups;
      if ((annotation.text != null) && (annotation.text.length > 0) && 0 === annotation.groups.length) {
        window.alert("You did not select a Privacy Setting, so the default 'Instructor' has been chosen.");
        return annotation.groups = ["INSTRUCTOR"];
      }
    };

    Privacy.prototype.updateViewer = function(field, annotation) {
      field = $(field);
      console.log(annotation);
      if (annotation.groups && $.isArray(annotation.groups) && annotation.groups.length) {
        return field.addClass('annotator-groups').html(function() {
          var string;
          return string = $.map(annotation.groups, function(group) {
            return '<span class="annotator-group">' + Annotator.Util.escape(group) + '</span>';
          }).join(' ');
        });
      } else {
        return field.remove();
      }
    };

    return Privacy;

  })(Annotator.Plugin);

}).call(this);
