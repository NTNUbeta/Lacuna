<?php
/**
 * @file
 *
 * Allow book marking of Page Turner pages
 *
 * Mike Widner <mikewidner@stanford.edu>
 *
 **/

/*
 * Plan: because flags are per-entity, but we can save values
 * use the values per entity, per user to store which page(s)
 * have been bookmarked and to remove those bookmarks, when needed
 * see: https://www.drupal.org/node/1748148#write-flagging-fields
 * Example of multiple bookmarked pages in one node:
 * $flagging->{'page'}['und'][0]['value'] = 1
 * $flagging->{'page'}['und'][1]['value'] = 7
 */

define("PAGE_TURNER_BOOKMARK_FLAG", 'page_turner_bookmark'); // for consistency

/**
 * Implements hook_menu().
 */
function page_turner_bookmarks_menu() {
  $items = array();
  $content_types = variable_get('page_turner_node_types');
  foreach ($content_types as $key => $value) {
    // Expose button to page
    if (!$value) {
      $items[$key] = array(
        'page callback' => 'page_turner_bookmark_ajax',
        'type' => MENU_CALLBACK,
      );
    }
  }

  $items['admin/user-interface/page-turner/bookmark/add'] = array(
    'page callback' => 'page_turner_bookmark_add',
    'access arguments' => 'flag page_turner_bookmark',
    'type' => MENU_CALLBACK,
    );
  $items['admin/user-interface/page-turner/bookmark/remove'] = array(
    'page callback' => 'page_turner_bookmark_remove',
    'access arguments' => 'unflag page_turner_bookmark',
    'type' => MENU_CALLBACK,
    );
  return $items;
}

/**
 * Get PUT data from new bookmark request
 * @see http://php.net/manual/en/features.file-upload.put-method.php
 */
function page_turner_bookmark_get_data() {
	$json = '';
	// PUT data comes in on the stdin stream
	$put = fopen('php://input', 'r');
	// Read the data 1 KB at a time and write to the file
	while ($chunk = fread($put, 1024)) {
		$json .= $chunk;
	}
	fclose($put);

	$entity = (object) drupal_json_decode($json);
	return $entity;
}

/**
 * AJAX callback
 * Creates commands for (un)bookmarking
 */
function page_turner_bookmark_ajax() {
  $commands = array();

  $selector = '#page-turner-bookmark';
  $html = "";
  print ajax_render($commands);
  drupal_exit();
}

/**
 * Menu callback
 *
 * Return list of current user's bookmarks
 */
function page_turner_bookmark_list($type, $id) {
  global $user;
	$source = drupal_lookup_path('source', $type . '/' . $id);
	$node = menu_get_object('node', 1, $source);
  $bookmarks = flag_get_flag(PAGE_TURNER_BOOKMARK_FLAG);

	if ($bookmarks && $bookmarks->is_flagged($node->nid, $user->uid)) {
		drupal_json_output($bookmarks);
	}
	drupal_json_output(array());
}

/**
 * Menu callback
 *
 * Creates a new bookmark for the selected page(s)
 **/
function page_turner_bookmark_add() {
	$data = page_turner_bookmark_get_data();
	ddl($data);
//  $flag_name = PAGE_TURNER_BOOKMARK_FLAG;
//  $flag_values = new stdClass();
//  $flag_values->{'pages'}[LANGUAGE_NONE][0]['value'] = $data;

}

/**
 * Menu callback
 *
 * Removes existing bookmark for the selected page(s)
 **/
function page_turner_bookmark_remove() {

}

/**
 * Implements hook_node_view()
 */
function page_turner_bookmarks_node_view($node, $view_mode, $langcode) {
		// Load the JS, but in the same group as our parent module and
		// AFTER it's done loading (for events)
		global $user;
		$source = drupal_lookup_path('source', $type . '/' . $id);
		$bookmarks = flag_get_flag(PAGE_TURNER_BOOKMARK_FLAG);
		if ($bookmarks && $bookmarks->is_flagged($node->nid, $user->uid)) {
			drupal_add_js(array('page_turner_bookmarks' => $bookmarks), 'setting');
		}
		drupal_add_js(drupal_get_path('module', 'page_turner_bookmarks') . '/js/page_turner_bookmarks.js', array('group' => 'page_turner', 'weight' => 10));
}
