<?php
/**
 * @file
 * This module handles hooks and alterations necessary
 * for the course functionality around user registration, approval, and
 * permissions
 */


/**
 * Implements hook_menu_alter().
 *
 * Restrict access to course-related content generated by other modules
 * For all of these items, only approved members of the current course
 * should have access. Some of these have role-based permissions,
 * but the addition of approved/unapproved students makes this necessary.
 *
 * @param $items
 *    Array of menu items
 */
function course_menu_alter(&$items) {
  // Access to views handled in course_views_query_alter()
  $items_to_restrict = array(
    'visualization/responses',
    'visualization/dashboard',
    'visualization/dashboard/data.json',
    'visualization/journey',  // Not implemented, but still...
  );

  foreach ($items_to_restrict as $item) {
    $items[$item]['access callback'] = 'course_registration_content_access';
  }
}

/**
 * Deny access if a user is a member of a course group,
 * but not yet approved
 *
 * If pending, deny immediately.
 * Otherwise, check default accesses.
 */
function course_registration_content_access($arguments) {
  $access = FALSE;
  $gid = course_get_selected_course();

  // If no current course, means cannot switch to it (i.e., still pending)
  // So, deny access; See course_switch_access() in course.module
  // Otherwise, check the default permissions
  if (!empty($gid) && og_is_member('node', $gid) == TRUE) { // Only returns true if member is active
    $access = TRUE;
  }

  return $access;
}