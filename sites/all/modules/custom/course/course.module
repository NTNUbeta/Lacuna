<?php
/**
 * @file
 * Code for the Lacuna Stories Course feature.
 */

include_once 'course.features.inc';

define("COURSE_NODE_TYPE", 'course');
define("BIBLIO_NODE_TYPE", 'biblio');

/**
 * Implements hook_menu().
 */
function course_menu() {
  $items = array();
  $items['createcourse'] = array(
    'title' => 'Create a New Course',
    'description' => 'course creation.',
    'page callback' => 'course_create_authorize',
    'access callback' => 'course_access',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'course.pages.inc',
  );
  $items['createcourse-2'] = array(
    'title' => 'Creating a New Course',
    'description' => 'course creation.',
    'page callback' => 'course_create',
    'access callback' => 'course_access',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'course.pages.inc',
  );
  $items['createcourse-3/%'] = array(
    'title' => 'Set Up Materials',
    'description' => 'Add course materials.',
    'page callback' => 'course_set_up_materials',
    'page arguments' => array(1),
    'access callback' => 'course_access',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'course.pages.inc',
  );
  $items['createcourse-4'] = array(
    'title' => 'Add Material',
    'description' => 'Add course material.',
    'page callback' => 'course_add_material',
    'access callback' => 'course_access',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'course.pages.inc',
  );
  $items['ajax/add-unit-term'] = array(
    'page callback' => 'course_ajax_add_unit_term',
    'page arguments' => array(2),
    'access callback' => 'course_access',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'course.pages.inc',
  );
  $items['admin/config/content/lacuna-courses'] = array(
    'title' => 'Course Creation Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('course_admin_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
   );
  $items['switch-course/%'] = array(
    'title' => 'Switch Courses',
    'page callback' => 'course_switch_course',
    'page arguments' => array(1),
    'access callback' => 'course_access',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'course.pages.inc',
  );
  // Empty home (front) page, added onto via context
  $items['home'] = array(
    'page callback' => 'course_blank_page',
    'access callback' => TRUE,
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'course.pages.inc',
  );
  // "About This Course" callback. Link is defined separately in the feature.
  $items['about-course'] = array(
    'title' => 'About This Course',
    'page callback' => 'course_about_course',
    'access callback' => 'course_get_selected_course',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'course.pages.inc',
  );
  return $items;
}

/**
 * check permissions and token to create a course
 */
function course_access() {
  global $user;
  $key = "Course_Auth_Code_User_" . $user->uid;

  // we only want to check access when we are actually on a protected page
  // not just when eg the link is displayed and the access functions are called.
  if (!course_is_protected_page()) {
    return TRUE;
  }

  // ANON
  if (user_is_anonymous()) {
    drupal_set_message("You must be logged in to create a Lacuna Stories course.", 'status', FALSE);
    drupal_goto('user/login', array('query' => array('destination' => 'createcourse')));
  }
  // NO PERMS
  elseif (!user_access("create course content")) {
    drupal_set_message("Please contact the Lacuna Stories Team, your user does not have access to create a course", 'error', FALSE);
  }
  // Check for the auth code key and compare them
  elseif (($cache = cache_get($key)) && $_COOKIE['Drupal_visitor_' . $key] == $cache->data) {
    // VALID
    return TRUE;
  }
  // NO/MISMATCHED AUTHCODE
  else {
    drupal_set_message("Please type in the Authorization Code before creating a Lacuna Stories Course", 'status', FALSE);
    drupal_goto('createcourse');
  }
}

function course_is_protected_page() {
  return (preg_match("/createcourse/", current_path()) && current_path() != 'createcourse');
}

function course_admin_form() {
  $form = array();
  $form['course_authcode'] = array(
    '#type' => 'textfield',
    '#title' => t('The authorization code Teachers and TAs need to create Lacuna Stories Courses'),
    '#default_value' => variable_get('course_authcode', 's3kr3t'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

// Dynamic link from the course listings sets context or not before going to the course node
function course_select_course_link ($row, $view) {
  $gid = $row->nid;
  $title = $row->title;
  if ($view->current_display == 'not_enrolled') {
    return l($title, 'node/' . $gid);
  };
  //  global $user;
  //  if ($current_course = $user->data['current-course']) {
  //    if ($gid == $current_course) {
  //      $title .= " (current course)";
  //    }
  //  }
  return l ($title, 'switch-course/' . $gid);
}

/**
 * Implements hook_views_query_alter().
 */
function course_views_query_alter(&$view, &$query) {
  switch ($view->name) {

    case 'courses':
      if($view->name == "courses") {
        switch ($view->current_display) {
          case 'not_enrolled':
            // This cannot be done in the view. It needs to be done in a query alter. See: https://www.drupal.org/node/596860#comment-10030507
            $query->add_where_expression(2, 'node.nid NOT IN (SELECT gid FROM og_membership WHERE etid = ***CURRENT_USER***)');
            break;
          case 'enrolled':
          case 'select_course':
            // This could be done in the view. Doing here for simplicity.
            $query->add_where_expression(2, 'node.nid IN (SELECT gid FROM og_membership WHERE etid = ***CURRENT_USER***)');
            break;
        }
      }
      break;

    case 'people':
      // Filter the People view according to course.
      // Way easier this way than with a custom views filter, and equally performant.
      if ($current_course = course_get_selected_course()) {
        $query->add_where_expression(2, 'users.uid IN (SELECT etid FROM og_membership WHERE gid = ' . $current_course . ')');
      }
      break;
  }
}


/**
 * Implements hook_views_pre_render().
 */
function course_views_pre_render(&$view) {
  switch ($view->name) {

    case 'people':
      if ($current_course = course_get_selected_course()) {
        $course = node_load($current_course);
        $view->build_info['title'] = "People in " . $course->title;
      }
      break;
  }
}


// Set the header on the courses views.
function courses_views_headers ($view) {
  if($view->name == "courses") {
    $output = "";
    switch ($view->current_display) {
      case 'not_enrolled':
        if (user_is_logged_in()) {
          $output = 'Not Enrolled'; // anons get no header because they only see the one view, making the header redundant
        }
        break;
      case 'enrolled':
        $output = 'Enrolled';
        break;
      case 'select_course':
        $output = "Select Course";
        break;
    }
    return '<h2>' . $output . '</h2>';
  }
}

// Get the currently selected course
function course_get_selected_course () {
  global $user;
  if ($current_course = $user->data['current-course']) {
    return $current_course;
  }
}